// https://leetcode.com/problems/parallel-courses-ii/

// My approach

class Solution:
    def minNumberOfSemesters(self, n: int, dependencies: List[List[int]], k: int) -> int:
        if (len(dependencies) == 0):
            return (n//k) + (n%k)
        pre = collections.defaultdict(set)
        suc = collections.defaultdict(set)
        for a,b in dependencies:
            pre[a].add(b)
            suc[b].add(a)
        ans = 0
        course = set([i for i in range(1,n+1)])
        preq = set()
        for key in suc.keys():
            preq.add(key)
            for i in suc[key]:
                preq.add(i)
                
        print(course,preq)
        ans = ceil((len(course) - len(preq))/k)
        for key in suc.keys():
            val = suc[key]
            k = key
            c = 0
            while (len(val) > 0):
                p = val.pop()
                if (p not in suc or len(val) == 0):
                    c += 1
                if (c == k):
                    ans += 1
                    c = 0
            ans += c
        return ans
                    
                    
        # for key,val in suc.items():
        #     l = len(val)
        #     if (l > k):
        #         ans += (l//k) + (l%k)
        #     ans += ceil(l/k)
        # print(ans)
        # return -1
