// https://leetcode.com/problems/min-cost-to-connect-all-points/

// DID NOT WORK
/*
class Solution {
    class ListComparator<T extends Comparable<T>> implements Comparator<List<T>> {

  @Override
  public int compare(List<T> o1, List<T> o2) {
    //for (int i = 0; i < Math.min(o1.size(), o2.size()); i++) {
      int c = o1.get(0).compareTo(o2.get(0));
      if (c != 0) {
        return c;
      }
    
    return Integer.compare(o1.size(), o2.size());
  }

}
    public int minCostConnectPoints(int[][] points) {
        int res = 0;
        int len = points.length;
        // Collections.sort(points);
        //Collections.sort(points, new ListComparator<>());
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for (int i = 0; i < points.length - 1; i ++) {
            for (int j = i + 1; j < points.length; j ++) {
            //     if (i!=j)
            // int j = i + 1;
                    pq.offer((int)Math.abs(points[j][0] - points[i][0])+(int)Math.abs(points[j][1]-points[i][1]));
                //System.out.println((int)Math.abs(points[j][0] - points[i][0])+(int)Math.abs(points[j][1]-points[i][1]));
            }
        }
        Integer val = null;
        while( len > 0 && ((val = pq.poll()) != null)) {
            System.out.println(val);
            res += val;
            len --;
        }
        return res;
    }
}
*/
