// https://leetcode.com/problems/check-array-formation-through-concatenation/

class Solution:
    def canFormArray(self, arr, pieces):
        mp = {x[0]: x for x in pieces}
        # print(mp.get(4,[]))
        res = []
        for num in arr:
            res += mp.get(num,[])
        return res == arr
# TRY 1 - WORKED
# class Solution:
#     def canFormArray(self, arr: List[int], pieces: List[List[int]]) -> bool:
#         for i in pieces:
#             prev = -1
#             for j in i:
#                 if j in arr:
#                     ind = arr.index(j)
#                 else:
#                     return False
#                 if (prev < ind):
#                     prev = ind
#                 elif (prev >= ind):
#                     return False
#         return True
    
    
    
    
    # def binarySearch(self, arr, key):
    #     low = 0
    #     high = len(arr)
    #     mid = 0
    #     while low < high:
    #         mid = (high + low)//2
    #         if arr[mid] < key:
    #             low = mid + 1
    #         elif arr[mid] > key:
    #             high = mid - 1
    #         else:
    #             return mid
    #     return mid
    
        # dup = []
        # for i in pieces:
        #     dup.append(tuple(i))
        # print(dup)
        # print(arr)
        # for i in dup:
            # if list(i) not in arr:
            #     return False
        # dup.sort()
        # arr.sort()
        # return True
        
        # l = len(pieces)
        # count = 0
        # for i in pieces:
        #     x = len(i)
        #     for j in range(0, len(arr)-x):
        #         tmp = arr[j:j+x]
        #         if (i == tmp):
        #             count += 1
        # return count == l
        
# [37,69,3,74,46]
# [[37,69,3,74,46]]
# [1,3,5,7]
# [[2,4,6,8]]        
                    
