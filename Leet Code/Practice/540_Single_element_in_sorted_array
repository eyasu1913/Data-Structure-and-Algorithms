// https://leetcode.com/problems/single-element-in-a-sorted-array/

// My solution

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int num = nums[0];
        for(int i=1;i<nums.length;i++) {
            num = num ^ nums[i];
            System.out.println(num);
        }
        return num;
    }
}

// 

public static int singleNonDuplicate(int[] nums) {
        int start = 0, end = nums.length - 1;

        while (start < end) {
            // We want the first element of the middle pair,
            // which should be at an even index if the left part is sorted.
            // Example:
            // Index: 0 1 2 3 4 5 6
            // Array: 1 1 3 3 4 8 8
            //            ^
            int mid = (start + end) / 2;
            if (mid % 2 == 1) mid--;

            // We didn't find a pair. The single element must be on the left.
            // (pipes mean start & end)
            // Example: |0 1 1 3 3 6 6|
            //               ^ ^
            // Next:    |0 1 1|3 3 6 6
            if (nums[mid] != nums[mid + 1]) end = mid;

            // We found a pair. The single element must be on the right.
            // Example: |1 1 3 3 5 6 6|
            //               ^ ^
            // Next:     1 1 3 3|5 6 6|
            else start = mid + 2;
        }

        // 'start' should always be at the beginning of a pair.
        // When 'start > end', start must be the single element.
        return nums[start];
    }

// Other approach

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int low = 0;
        int high = nums.length-1;
        int mid = 0;
        while(low!=high) {
            mid = low + (high - low)/2;
            if(mid%2==0) {
                if(nums[mid]==nums[mid+1])
                    low = mid + 2;
                else
                    high = mid;
            }
            else {
                if(nums[mid]==nums[mid-1])
                    low = mid + 1;
                else
                    high = mid;
            }
        }
        return nums[low];
    }
}
