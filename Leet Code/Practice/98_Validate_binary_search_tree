// https://leetcode.com/problems/validate-binary-search-tree/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// RECURSIVE APPROACH
// class Solution {
//     public boolean isValidBST(TreeNode root) {
//         return isBST(root, Long.MIN_VALUE, Long.MAX_VALUE);
//     }
//     public boolean isBST(TreeNode root, long lower, long upper) {
//         if (root == null)
//             return true;
//         if (root.val <= lower || root.val >= upper)
//             return false;
//         return isBST(root.left, lower, root.val) && isBST(root.right, root.val, upper);
//     }
// }

// INORDER APPROACH
class Solution {
    public boolean isValidBST(TreeNode root) {
        Stack<TreeNode> stack = new Stack();
        double inorder = - Double.MAX_VALUE;
        
        while (!stack.isEmpty() || root != null) {
            while (root != null) {
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
            if (root.val <= inorder)return false;
            inorder = root.val;
            root = root.right;
        }
        return true;
    }
}

// FAILURE APPROACH
// class Solution {
//     public boolean isValidBST(TreeNode root) {
//         if (root == null)
//             return true;
//         if (root.left == null && root.right == null) 
//             return true;
//         if (root.left == null || root.right == null) 
//             return false;

//         TreeNode left = root.left;
//         TreeNode right = root.right;
//         isValidBST(left);
//         isValidBST(right);
//         if (left.val <= root.val && right.val >= root.val)
//             return true;
//         return false;
//     }
// }

// My approach

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    
    def isValidBST(self, root: TreeNode) -> bool:
        if(root==None):
            return True
        if(root.left==None and root.right==None):
            return True
        self.ans = []
        self.inorder(root)
        f = 0
        print(self.ans)
        for i in range(len(self.ans)-1):
            x = self.ans
            if(x[i]<x[i+1]):
                f = 1
            else:
                f = 0
                return False
        if(f==1):
            return True
        else:
            return False
        
        
    def inorder(self,root:TreeNode):
        if(root):
            self.inorder(root.left)
            self.ans.append(root.val)
            self.inorder(root.right)
        
        
// Other solutions

// https://leetcode.com/problems/validate-binary-search-tree/solution/
