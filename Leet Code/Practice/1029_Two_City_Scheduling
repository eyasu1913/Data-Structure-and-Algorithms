// https://leetcode.com/problems/two-city-scheduling/

// class Solution {
//     public int twoCitySchedCost(int[][] costs) {
//         int num = costs.length/2;
//         List<Integer> a = new ArrayList<Integer>();
//         List<Integer> b = new ArrayList<Integer>();
//         int sum = 0;
//         for (int i=0; i<costs.length; i++) {
//             if (a.contains(costs[i][0]) == false)
//                 a.add(costs[i][0]);
//             if (b.contains(costs[i][1]) == false)
//                 b.add(costs[i][1]);
//         }
//         Collections.sort(a);
//         Collections.sort(b);
//         int x = 0;
//         while ((num)!=x) {
//             sum += a.get(x);
//             sum += b.get(x);
//             System.out.println(a.get(x)+" "+b.get(x));
//             x++;
//         }
//         return sum;
//     }
// }

class Solution {
public int twoCitySchedCost(int[][] costs) {
        Arrays.sort(costs, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                return (a[1] - a[0]) - (b[1] - b[0]);
            }
        });
        int cost = 0;
        for (int i = 0; i < costs.length / 2; i++) {
            cost += costs[i][1] + costs[costs.length-i-1][0];
        }
        return cost;
    }
}
