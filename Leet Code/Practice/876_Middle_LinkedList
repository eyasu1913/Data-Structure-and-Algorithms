# https://leetcode.com/problems/middle-of-the-linked-list

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow = head, fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
}

// MY APPROACH - WORKING
// class Solution {
//     public ListNode middleNode(ListNode head) {
//         if (head == null) return null;
//         int count = 0;
//         ListNode node = head;
//         while (node != null) {
//             count += 1;
//             node = node.next;
//         }
//         int k = 0;
//         node = head;
//         while (node != null) {
//             if (k == (count/2))
//                 return node;
//             k += 1;
//             node = node.next;
//         }
//         return null;
//     }
// }


class Solution:
    def middleNode(self, head: ListNode) -> ListNode:
        temp = head
        temp1 = head
        if(temp.next == None):
            return temp
        c = 1
        while(temp!=None):
            c+=1
            temp = temp.next
            
        
        if(c%2==0):
            key = c//2
        else:
            key = c//2 + 1
            
        c = 1
        while(temp1!=None):
            if(c == key):
                return temp1
            c+=1
            temp1 = temp1.next
            
            
        
  # SOLUTION : https://leetcode.com/problems/middle-of-the-linked-list/solution/
