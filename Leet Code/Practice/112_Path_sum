// https://leetcode.com/problems/path-sum/

// Solution

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
// BFS APPROACH

class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if (root == null)
            return false;
        Queue<TreeNode> queue = new LinkedList();
        queue.add(root);
        while (!queue.isEmpty()) {
            int size = queue.size();
            while (size > 0) {
                TreeNode node = queue.poll();
                if (node.left == null && node.right == null && node.val == sum)
                    return true;
                if (node.left != null) {
                    node.left.val = node.left.val + node.val;
                    queue.add(node.left);
                }
                if (node.right != null) {
                    node.right.val = node.right.val + node.val;
                    queue.add(node.right);
                }
                size --;
            }
        }
        return false;
    }
}

// DFS APPROACH
public class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root == null) return false;

        if(root.left == null && root.right == null) return sum == root.val;

        return hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);
    }
}
