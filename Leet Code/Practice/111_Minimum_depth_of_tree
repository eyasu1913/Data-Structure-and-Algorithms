// https://leetcode.com/problems/minimum-depth-of-binary-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

// BFS APPROACH
class Solution {
    public int minDepth(TreeNode root) {
        if (root == null)
            return 0;
        Queue<TreeNode> queue = new LinkedList();
        int level = 1;
        queue.add(root);
        while (!queue.isEmpty()) {
            int size = queue.size();
            while (size > 0) {
                TreeNode node = queue.poll();
                if(node.left == null && node.right ==null)
                    return level;
                if(node.left != null)
                    queue.add(node.left);
                if(node.right != null)
                    queue.add(node.right);
                size--;
            }
            level++;
        }
        return level;
    }
}

// DFS APPROACH
// class Solution {
//     public int minDepth(TreeNode root) {
//         if (root == null)
//             return 0;
//         int left = minDepth(root.left);
//         int right = minDepth(root.right);
//         return (left == 0||right == 0)?left+right+1:1 + Math.min(left,right);
//     }
// }
