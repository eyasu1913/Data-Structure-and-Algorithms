// https://leetcode.com/problems/valid-parentheses/

// My approach

class Solution {
    private HashMap<Character,Character> mappings;
    public Solution(){
        this.mappings = new HashMap<Character,Character>();
        this.mappings.put('(',')');
        this.mappings.put('[',']');
        this.mappings.put('{','}');
    }
    public boolean isValid(String s){
        Stack<Character> stack = new Stack<Character>();
        char ch[] = s.toCharArray();
        for(int i=0;i<s.length();i++){
            if(ch[i]=='(' || ch[i]=='[' || ch[i]=='{')stack.push(ch[i]);
            else if(stack.isEmpty()==false)
                {if(stack.peek()=='(' && ch[i]==mappings.get('('))stack.pop();
                else if(stack.peek()=='[' && ch[i]==mappings.get('['))stack.pop();
                else if(stack.peek()=='{' && ch[i]==mappings.get('{'))stack.pop();
                else return false;}
            else
                return false;
        }
        if(stack.isEmpty())   
            return true;
        else
            return false;
    }
}

// Solution

class Solution {

  // Hash table that takes care of the mappings.
  private HashMap<Character, Character> mappings;

  // Initialize hash map with mappings. This simply makes the code easier to read.
  public Solution() {
    this.mappings = new HashMap<Character, Character>();
    this.mappings.put(')', '(');
    this.mappings.put('}', '{');
    this.mappings.put(']', '[');
  }

  public boolean isValid(String s) {

    // Initialize a stack to be used in the algorithm.
    Stack<Character> stack = new Stack<Character>();

    for (int i = 0; i < s.length(); i++) {
      char c = s.charAt(i);

      // If the current character is a closing bracket.
      if (this.mappings.containsKey(c)) {

        // Get the top element of the stack. If the stack is empty, set a dummy value of '#'
        char topElement = stack.empty() ? '#' : stack.pop();

        // If the mapping for this bracket doesn't match the stack's top element, return false.
        if (topElement != this.mappings.get(c)) {
          return false;
        }
      } else {
        // If it was an opening bracket, push to the stack.
        stack.push(c);
      }
    }

    // If the stack still contains elements, then it is an invalid expression.
    return stack.isEmpty();
  }
}
