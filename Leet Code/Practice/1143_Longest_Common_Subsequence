// https://leetcode.com/problems/longest-common-subsequence/

// BOTTOM UP APPROACH - DYNAMIC PROGRAMMING
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        char ch1[] = text1.toCharArray();
        char ch2[] = text2.toCharArray();
        return LCS(ch1,ch2,text1.length(),text2.length());
    }
    public int LCS(char X[],char Y[],int m,int n) {
        int L[][] = new int[m+1][n+1];
        for(int i=0;i<=m;i++){
            for(int j=0;j<=n;j++){
                if(i==0 || j==0)
                    L[i][j] = 0;
                else if(X[i-1] == Y[j-1])
                    L[i][j] = L[i-1][j-1] + 1;
                else
                    L[i][j] = (int)Math.max(L[i-1][j],L[i][j-1]);
            }
        }
        return L[m][n];
    }
}

//      RECURSIVE SOLUTION - OVERLAPPING SUBPROBLEMS
//     public int longestCommonSubsequence(String text1, String text2) {
        // char ch1[] = text1.toCharArray();
        // char ch2[] = text2.toCharArray();
        // return LCS(ch1,ch2,text1.length(),text2.length());
//     }
//     public int LCS(char ch1[],char ch2[],int m,int n){
//         if(m == 0||n == 0)
//             return 0;
//         if(ch1[m-1] == ch2[n-1])
//             return 1 + LCS(ch1,ch2,m-1,n-1);
//         else
//             return (int)Math.max(LCS(ch1,ch2,m,n-1),LCS(ch1,ch2,m-1,n));
//     }
    
// }
