// https://leetcode.com/problems/invert-binary-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

// APPROACH 2 - ITERATIVE - BFS
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if (root == null) return null;
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        while (!queue.isEmpty()) {
            TreeNode current = queue.poll();
            TreeNode temp = current.left;
            current.left = current.right;
            current.right = temp;
            if (current.left != null) queue.add(current.left);
            if (current.right != null) queue.add(current.right);
        }
        return root;
    }
}

// APPROACH 1 - RECURSIVE - DFS
// class Solution {
//     public TreeNode invertTree(TreeNode root) {
//         if (root == null)
//             return null;
//         TreeNode left = root.left;
//         TreeNode right = root.right;
//         root.left = invertTree(right);
//         root.right = invertTree(left);
//         return root;
//     }
// }

// MY APPROACH
// class Solution {
//     List<Integer> nodes = new LinkedList<Integer>();
//     int k;
//     public TreeNode invertTree(TreeNode root) {
//         inorder(root);
//         k = nodes.size() - 1;
//         changeOrder(root);
//         return root;
//     }
//     public void inorder(TreeNode root) {
//         if (root != null) {
//             inorder(root.left);
//             nodes.add(root.val);
//             inorder(root.right);
//         }
//         else
//             nodes.add(null);
//     }
//     public void changeOrder(TreeNode root) {
//         if (root != null) {
//             changeOrder(root.left);
//             root.val = nodes.get(k--);
//             changeOrder(root.right);
//         }
//         else
//             root = null;
//     }
// }
