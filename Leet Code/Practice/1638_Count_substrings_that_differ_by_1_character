// https://leetcode.com/problems/count-substrings-that-differ-by-one-character/

class Solution:
    def countSubstrings(self, s, t):
        if (len(s) > len(t)):
            s, t = t, s
        
        Ns = len(s)
        Nt = len(t)
        N = len(s)
        
        total = 0
        for i in range(len(s)):
            for j in range(len(t)):
                count = 0
                for k in range(N):
                    if i + k >= Ns or j + k >= Nt:
                        break
                    if s[i + k] != t[j + k]:
                        count += 1
                    if count == 1:
                        total += 1
        return total


# import itertools
# class Solution:
#     def countSubstrings(self, s: str, t: str) -> int:
# #         x = []
# #         for i in range(1,len(s)):
# #             subs = itertools.combinations(s,i)
# #             tmp = (list(subs))
# #             for j in tmp:
# #                 x.append(''.join(j))
        
# #         y = []
# #         for i in range(1,len(t)):
# #             subt = itertools.combinations(t, i)
# #             tmp = (list(subt))
# #             for j in tmp:
# #                 y.append(''.join(j))
#         x = (list(itertools.chain.from_iterable([[s[i:i+k] for i in range(len(s)-k+1)] for k in range(1,len(s)+1)])))
#         y = (list(itertools.chain.from_iterable([[t[i:i+k] for i in range(len(t)-k+1)] for k in range(1,len(t)+1)])))
#         print(x,y)
#         count = 0
#         for i in x:
#             for j in y:
                
#                 if (len(i)==len(j) and not(set(i)==set(j))):
#                     # print(len(i),len(j),set(i),set(j))
#                     count += 1
#         return count
