// https://leetcode.com/problems/trim-a-binary-search-tree/

// /**
//  * Definition for a binary tree node.
//  * public class TreeNode {
//  *     int val;
//  *     TreeNode left;
//  *     TreeNode right;
//  *     TreeNode() {}
//  *     TreeNode(int val) { this.val = val; }
//  *     TreeNode(int val, TreeNode left, TreeNode right) {
//  *         this.val = val;
//  *         this.left = left;
//  *         this.right = right;
//  *     }
//  * }
//  */
// class Solution {
//     public TreeNode trimBST(TreeNode root, int low, int high) {
//         if (root == null) return null;
//         inorder(root, low, high);
//         return root;
//     }
//     public void inorder(TreeNode root, int low, int high) {
//         if (root != null) {
//             inorder(root.left, low, high);
//             if (low >= root.val || high <= root.val) {
//                 if (root.left == null && root.right == null)
//                     root = null;
//                 else if (root.left == null)
//                     root = root.right;
//                 else
//                     root = root.left;
//                 inorder(root, low, high);        
//             }
//             else
//                 inorder(root.right, low, high);
            
//         }
//     }
// }
class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
        if (root == null) return root;
        if (root.val > high) return trimBST(root.left, low, high);
        if (root.val < low) return trimBST(root.right, low, high);

        root.left = trimBST(root.left, low, high);
        root.right = trimBST(root.right, low, high);
        return root;       
    }
}
