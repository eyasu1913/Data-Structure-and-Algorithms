// https://leetcode.com/problems/last-stone-weight/

// My approach

import java.util.Arrays;
import java.util.Collections;
class Solution {
    public int lastStoneWeight(int[] stones) {
        Arrays.sort(stones);
        List<Integer> arr = new ArrayList<Integer>();
        for(int i=0;i<stones.length;i++)
            arr.add(stones[i]);
        
        return recurse(arr);
    }
    public int recurse(List<Integer> arr){
        if(arr.size()==1)
            return arr.get(0);
        else
        {
            Collections.sort(arr);
            for(int i:arr)System.out.print(i+" ");
            System.out.println();
            int firstmax = Collections.max(arr);
            arr.remove(arr.indexOf(firstmax));
            int secondmax = Collections.max(arr);
            arr.remove(arr.indexOf(secondmax));
                if(firstmax==secondmax)
                {
                    arr.add(0);
                }
                else if(firstmax>secondmax)
                {
                    arr.add(firstmax-secondmax);
                }
            return recurse(arr);
        }
    }
    
}

// Solution - Priority Queue

public int lastStoneWeight(int[] A) {
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b)-> b - a);
        for (int a : A)
            pq.offer(a);
        while (pq.size() > 1)
            pq.offer(pq.poll() - pq.poll());
        return pq.poll();
    }


 public int lastStoneWeight(int[] stones) {
        PriorityQueue<Integer> q = new PriorityQueue<>(Comparator.reverseOrder());
        for (int st : stones) { q.offer(st); }
        while (q.size() > 1) {
            q.offer(q.poll() - q.poll());
        }
        return q.peek();
    }
    
    
def lastStoneWeight(self, stones: List[int]) -> int:
    q = [-stone for stone in stones]
    heapq.heapify(q)
    while (len(q)) > 1:
        heapq.heappush(q, heapq.heappop(q) - heapq.heappop(q))
    return -q[0]
