// https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
// Iterative approach
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        while (root != null) {
            int parent = root.val;
            int pVal = p.val;
            int qVal = q.val;
            if (pVal > parent && qVal > parent) {
                root = root.right;
            } else if (pVal < parent && qVal < parent) {
                root = root.left;
            } else {
                return root;
            }
        }
        return null;
    }
}
// Recursive approach
// class Solution {
//     public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
//         int parent = root.val;
//         int pVal = p.val;
//         int qVal = q.val;
//         if (pVal > parent && qVal > parent) {
//             return lowestCommonAncestor(root.right, p , q);
//         } else if (pVal < parent && qVal < parent) {
//             return lowestCommonAncestor(root.left, p , q);
//         } else {
//             return root;
//         }
//     }
// }
// Normal Binary Tree approach
// class Solution {
//     public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
//         if (root == null)
//             return null;
//         if (root == p || root == q) 
//             return root;
//         TreeNode left = lowestCommonAncestor(root.left, p, q);
//         TreeNode right = lowestCommonAncestor(root.right, p, q);
        
//         if (left == null && right == null)
//             return null;
//         if (left != null && right != null)
//             return root;
//         return left!=null?left:right;
        
//     }
// }
