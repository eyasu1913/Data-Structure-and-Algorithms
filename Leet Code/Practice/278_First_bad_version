// https://leetcode.com/problems/first-bad-version

// My approach

/* The isBadVersion API is defined in the parent class VersionControl.
      boolean isBadVersion(int version); */

public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        // int arr[] = new int[n];
        // for(int i=0;i<n;i++)
        //     arr[i] = i+1;
        //return binarySearch(arr,0,n);
        return binarySearch(1,n);
    }
    public int binarySearch(int start, int end) {
        int low = start;
        int high = end;
        int mid = 0;
        //boolean lastVersion = true;
        while(low<high) {
            mid = low + (high - low)/2;
            if(mid == 1 && isBadVersion(1)==true)
                return 1;
            if(isBadVersion(mid)==false)
            {
                //lastVersion = false;
                low = mid + 1;
            }
            else if(isBadVersion(mid)==true && isBadVersion(mid-1) == true)
            {
                //lastVersion = true;
                high = mid - 1;
            }
            else
                return mid;
        }
        return mid;
    }
}

// Solution

public int firstBadVersion(int n) {
    int left = 1;
    int right = n;
    while (left < right) {
        int mid = left + (right - left) / 2;
        if (isBadVersion(mid)) {
            right = mid;
        } else {
            left = mid + 1;
        }
    }
    return left;
}
