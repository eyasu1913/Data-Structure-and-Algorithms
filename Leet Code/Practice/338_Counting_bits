// https://leetcode.com/problems/counting-bits/

// My approach

class Solution {
    public int[] countBits(int num) {
        int c = 0;
        List<Integer> li = new ArrayList<Integer>();
        for(int i=0;i<=num;i++)
        {
            int weight = (hammingWeight(i));
            li.add(weight);
        }
        int len = li.size();
        int a[] =new int[len];
        for(int i=0;i<len;i++)
            a[i] = li.get(i);
        return a;
    }
    public int hammingWeight(int n) {
        int bits = 0;
        int mask = 1;
        for(int i=0;i<32;i++){
            if((n&mask)!=0)
                bits++;
            mask<<=1;
        }
        return bits;
    }

}

// Best

public int[] countBits(int num) {
    int[] f = new int[num + 1];
    for (int i=1; i<=num; i++) f[i] = f[i >> 1] + (i & 1);
    return f;
}

// An easy recurrence for this problem is f[i] = f[i / 2] + i % 2.
