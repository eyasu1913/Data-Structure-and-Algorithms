// https://leetcode.com/problems/132-pattern/

// Fifth approach - 
class Solution {
    public boolean find132pattern(int[] nums) {
        int[] min = new int[nums.length];
        Stack<Integer> stack = new Stack<>();
        min[0] = nums[0];
        for (int i = 1; i < nums.length; i ++) {
            min[i] = Math.min(min[i - 1], nums[i]);
        }
        for (int j = nums.length - 1; j >= 0; j --) {
            if (nums[j] > min[j]) {
                while (!stack.isEmpty() && stack.peek() <= min[j])
                    stack.pop();
                if (!stack.isEmpty() && stack.peek() < nums[j])
                    return true;
                stack.push(nums[j]);
            }
        }
        return false;
    }
}

// Fourth approach - Better brute force solution
// class Solution {
//     public boolean find132pattern(int[] nums) {
//         int minj = Integer.MAX_VALUE;
//         for (int j = 0; j < nums.length; j ++) {
//             minj = Math.min(minj, nums[j]);
//             if (minj == nums[j]) continue;
//             for (int k = nums.length - 1; k > j; k --) {
//                 if ((minj < nums[k]) && (nums[k] < nums[j]))
//                     return true;
//             }
//         }
//         return false;
//     }
// }


// Third approach - Tried using Stack
// class Solution {
//     public boolean find132pattern(int[] nums) {
//         if (nums.length < 3) return false;
//         Stack<Integer> stack = new Stack<>();
//         for (int i = 0; i < nums.length; i ++) {
//             if (!stack.isEmpty() && stack.size() >= 2 && (nums[i] < stack.peek())) {
//                 int tmp = stack.pop();
//                 if (nums[i] > stack.peek())
//                     return true;
//                 // stack.push(tmp);
//             }
//             else if (!stack.isEmpty() && stack.size() >= 2 && nums[i] >= stack.peek())
//                 stack.pop();
//             stack.push(nums[i]);
//         }
//         return false;
//     }
// }

// Second approach - WA
// class Solution {
//     public boolean find132pattern(int[] nums) {
//         if (nums.length < 3) return false;
//         for (int i = 1; i < nums.length - 1; i ++) {
//             System.out.println(nums[i - 1] + " " + nums[i + 1] + " " + nums[i]);
//             if ((nums[i - 1] < nums[i + 1]) && (nums[i + 1] < nums[i])) {
//                 System.out.println(nums[i - 1] + " " + nums[i + 1] + " " + nums[i]);
//                 return true;
//             }
//         }
//         return false;
//     }
// }

// Brute force approach - TLE
// class Solution {
//     public boolean find132pattern(int[] nums) {
//         if (nums.length < 3)
//             return false;
//         int count = 0;
//         for (int i = 0; i < nums.length; i ++) {
//             for (int j = i + 1; j < nums.length; j ++) {
//                 for (int k = j + 1; k < nums.length; k ++) {
//                     if ((nums[i] < nums[k]) && (nums[k] < nums[j]))
//                         //count ++;
//                         return true;
//                 }
//             }
//         }
//         // return (count > 0)? true: false;
//         return false;
//     }
// }
