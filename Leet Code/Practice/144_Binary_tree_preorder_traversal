// https://leetcode.com/problems/binary-tree-preorder-traversal/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

// ITERATIVE APPROACH
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<Integer>();
        Stack<TreeNode> stack = new Stack<TreeNode>();
        while (root != null) {
            result.add(root.val);
            if (root.right != null)
                stack.push(root.right);
            root = root.left;
            while (root == null && !stack.isEmpty()) {
                root = (stack.pop());
            }
        }
        return result;
    }
}
// RECURSIVE APPROACH
// class Solution {
//     List<Integer> traversal = new ArrayList<Integer>();
//     public List<Integer> preorderTraversal(TreeNode root) {
//         preorder(root);
//         return traversal;
//     }
//     public void preorder(TreeNode root) {
//         if (root != null) {
//             traversal.add(root.val);
//             preorder(root.left);
//             preorder(root.right);
//         }
//     }
// }
