// https://leetcode.com/problems/implement-queue-using-stacks/

// My approach

class MyQueue {
    Stack<Integer> stack1;
    Stack<Integer> stack2;
    int top;
    /** Initialize your data structure here. */
    public MyQueue() {
        stack1 = new Stack<Integer>();
        stack2 = new Stack<Integer>();
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        if(stack1.isEmpty())
        {
            top = x;
        }
        if(stack2.isEmpty()==false)
        {
            while(!stack2.isEmpty())
                stack1.push(stack2.pop());
        }
        stack1.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        while(!stack1.isEmpty())
            stack2.push(stack1.pop());
        int val = stack2.pop();
        if(!stack2.isEmpty())
            top = stack2.peek();
        return val;
    }
    
    /** Get the front element. */
    public int peek() {
        return top;
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        if(!stack1.isEmpty() || !stack2.isEmpty())
            return false;
        else
            return true;
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
