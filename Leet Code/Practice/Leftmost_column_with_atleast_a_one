// https://leetcode.com/explore/featured/card/30-day-leetcoding-challenge/530/week-3/3306/

// My approach

    public int leftMostColumnWithOne(BinaryMatrix binaryMatrix) {
        List<Integer> dim = binaryMatrix.dimensions();
        int rows = dim.get(0)-1,cols = dim.get(1)-1;
        int result[] = new int[cols];
        System.out.println("Rows: "+rows+"Columns: "+cols);
        int min = 99999;
        for(int i=0;i<=rows;i++)
        {
            int index = binarySearch(binaryMatrix,i,0,cols);
            System.out.println(index);
            
            if(min>index && binaryMatrix.get(i,index)==1)
                min = index;
            
        }
        if(min!=99999)
        return min;
        else
            return -1;
    }
    public int binarySearch(BinaryMatrix binaryMatrix,int rowno,int start,int end)
    {
        int low = start;
        int high = end;
        int mid = -1;
        while(low<=high)
        {
            mid = low + (high - low)/2;
            if(binaryMatrix.get(rowno,mid)<1)low = mid + 1;
            else if(binaryMatrix.get(rowno,mid)>=1)high = mid - 1;
            //else return mid;
        }
        return mid;
        // if(mid>-1 && binaryMatrix.get(rowno,mid)==1)
        //     return mid;
        // else
        // return -1;
    }
}
        int startrow = 0,startcol = 0,endrow = rows, endcol = cols,midrow = 1,midcol = 1;
        int value = 0;
        while(startrow<=endrow && startcol<=endcol)
        {
            midrow = (startrow+endrow)/2;
            midcol = (startcol+endcol)/2;
            value = binaryMatrix.get(midrow,midcol);
            System.out.println(midrow+" "+midcol+" "+value);
            if(value==0)
            {
                startrow = midrow+1;
                startcol = midcol+1;
            }
            else
            {
                endrow = midrow-1;
                endcol = midcol-1;
            }
        }
        if(binaryMatrix.get(midrow,midcol)==1)
            return midcol;
        else
            return -1;
        
        
        
        for(int i=0;i<col;i++)
        {
            int count = 0;
            for(int j=0;j<row;j++)
            {
                count+=binaryMatrix.get(j,i);
            }
            if(count>=1)
            {
                return i;
            }
            result[i] = count;
        }
        int ans = -1;
        for(int i=0;i<col;i++)
        {
            if(result[i]>=1)
            {
                ans = i;
                break;
            }
        }
        return ans;
    }
}

// Solution

class Solution {
    public int leftMostColumnWithOne(BinaryMatrix binaryMatrix){
        List<Integer> dim = binaryMatrix.dimensions();
        int rows = dim.get(0),cols = dim.get(1);
        //int result[] = new int[cols];
        System.out.println("Rows: "+rows+"Columns: "+cols);
        int i = 0, j = cols - 1;
        int minIndex = -1;
        while(i<rows && j>=0){
            if(binaryMatrix.get(i,j)==0){
                i++;
            }
            else
            {
                minIndex = j;
                j--;
            }
        }
        return minIndex;
    }   
}
